header ethernet_t {
	bit<48>	dst_addr;
	bit<48>	src_addr;
	bit<16>	ether_type;
}
header vlan_tag_t {
	bit<3>	pcp;
	bit<1>	cfi;
	bit<12>	vid;
	bit<16>	ether_type;
}
header ipv4_t {
	bit<4>	version;
	bit<4>	ihl;
	bit<8>	diffserv;
	bit<16>	total_len;
	bit<16>	identification;
	bit<3>	flags;
	bit<13>	frag_offset;
	bit<8>	ttl;
	bit<8>	protocol;
	bit<16>	hdr_checksum;
	bit<32>	src_addr;
	bit<32>	dst_addr;
}
header ipv6_t {
	bit<4>	version;
	bit<8>	traffic_class;
	bit<20>	flow_label;
	bit<16>	payload_len;
	bit<8>	next_hdr;
	bit<8>	hop_limit;
	bit<128>	src_addr;
	bit<128>	dst_addr;
}
header tcp_t {
	bit<16>	src_port;
	bit<16>	dst_port;
	bit<32>	seq_no;
	bit<32>	ack_no;
	bit<4>	data_offset;
	bit<4>	res;
	bit<8>	flags;
	bit<16>	window;
	bit<16>	checksum;
	bit<16>	urgent_ptr;
}
header udp_t {
	bit<16>	src_port;
	bit<16>	dst_port;
	bit<16>	hdr_length;
	bit<16>	checksum;
}
struct lookup_fields_t {
	bit<48>	mac_src_addr;
	bit<48>	mac_dst_addr;
	bit<16>	mac_type;
	bit<4>	ip_version;
	bit<8>	ip_proto;
	bit<8>	ip_ttl;
	bit<8>	ip_dscp;
	bit<20>	ipv6_flow_label;
	bit<32>	ipv4_src_addr;
	bit<32>	ipv4_dst_addr;
	bit<128>	ipv6_src_addr;
	bit<128>	ipv6_dst_addr;
} lkp_0;
struct metadata {
	bit<1>	fib_tmp;
	bit<1>	fibv6_tmp;
	bit<1>	nexthop_routed;
	bit<16>	metadata_t_bd;
	bit<16>	metadata_t_vrf;
	bit<16>	metadata_t_nexthop;
	bit<16>	metadata_t_ifindex;
	bit<16>	metadata_t_egress_ifindex;
	bit<8>	metadata_t_bypass;
} meta;
struct headers {
	ethernet_t	ethernet;
	vlan_tag_t	vlan_tag;
	ipv4_t	ipv4;
	ipv6_t	ipv6;
	tcp_t	tcp;
	udp_t	udp;
} hdr;

struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> clone_spec;
    bit<32> instance_type;
    bit<1> drop;
    bit<16> recirculate_port;
    bit<32> packet_length;
} standard_metadata;

parser MyParser(packet_in packet) {
	state start {
		packet.extract(hdr.ethernet);
		transition select(hdr.ethernet.ether_type) {
			0x0800: parse_ipv4;
			0x86dd: parse_ipv6;
			0x8100: parse_vlan;
			default: accept;
		}
	}
	state parse_vlan {
		packet.extract(hdr.vlan_tag);
		transition select(hdr.vlan_tag.ether_type) {
			0x0800: parse_ipv4;
			0x86dd: parse_ipv6;
			default: accept;
		}
	}
	state parse_ipv4 {
		packet.extract(hdr.ipv4);
		transition select(hdr.ipv4.protocol) {
			0x06: parse_tcp;
			0x11: parse_udp;
			default: accept;
		}
	}
	state parse_ipv6 {
		packet.extract(hdr.ipv6);
		transition select(hdr.ipv6.next_hdr) {
			0x06: parse_tcp;
			0x11: parse_udp;
			default: accept;
		}
	}
	state parse_tcp {
		packet.extract(hdr.tcp);
		transition accept;
	}
	state parse_udp {
		packet.extract(hdr.udp);
		transition accept;
	}
}

actions {
	action NoAction_0() {
	}
	action NoAction_1() {
	}
	action NoAction_2() {
	}
	action NoAction_3() {
	}
	action NoAction_4() {
	}
	action NoAction_5() {
	}
	action NoAction_6() {
	}
	action NoAction_7() {
	}
	action NoAction_8() {
	}
	action set_port_attributes(bit<16> ifindex) {
		meta.metadata_t_ifindex = ifindex;
	}
	action set_bd_attributes(bit<16> bd, bit<16> vrf) {
		meta.metadata_t_bd = bd;
		meta.metadata_t_vrf = vrf;
	}
	action malformed_pkt_11() {
	}
	action malformed_pkt_12() {
	}
	action malformed_pkt_13() {
	}
	action valid_pkt_untagged() {
		lkp_0.mac_src_addr = hdr.ethernet.src_addr;
		lkp_0.mac_dst_addr = hdr.ethernet.dst_addr;
		lkp_0.mac_type = hdr.ethernet.ether_type;
	}
	action valid_pkt_tagged() {
		lkp_0.mac_src_addr = hdr.ethernet.src_addr;
		lkp_0.mac_dst_addr = hdr.ethernet.dst_addr;
		lkp_0.mac_type = hdr.vlan_tag.ether_type;
	}
	action valid_ipv4_pkt() {
		lkp_0.ip_version = 0x04;
		lkp_0.ip_dscp = hdr.ipv4.diffserv;
		lkp_0.ip_proto = hdr.ipv4.protocol;
		lkp_0.ip_ttl = hdr.ipv4.ttl;
		lkp_0.ipv4_src_addr = hdr.ipv4.src_addr;
		lkp_0.ipv4_dst_addr = hdr.ipv4.dst_addr;
	}
	action valid_ipv6_pkt() {
		lkp_0.ip_version = 0x06;
		lkp_0.ip_dscp = hdr.ipv6.traffic_class;
		lkp_0.ip_proto = hdr.ipv6.next_hdr;
		lkp_0.ip_ttl = hdr.ipv6.hop_limit;
		lkp_0.ipv6_src_addr = hdr.ipv6.src_addr;
		lkp_0.ipv6_dst_addr = hdr.ipv6.dst_addr;
	}
	action dmac_miss() {
		meta.metadata_t_egress_ifindex = 0xffff;
	}
	action dmac_hit(bit<16> ifindex) {
		meta.metadata_t_egress_ifindex = ifindex;
	}
	action fib_fib_hit_20(bit<16> nexthop_index) {
		meta.metadata_t_nexthop = nexthop_index;
	}
	action fib_fib_hit_21(bit<16> nexthop_index) {
		meta.metadata_t_nexthop = nexthop_index;
	}
	action fib_fib_miss_22() {
	}
	action fib_fib_miss_23() {
	}
	action fibv6_fib_hit_24(bit<16> nexthop_index) {
		meta.metadata_t_nexthop = nexthop_index;
	}
	action fibv6_fib_hit_25(bit<16> nexthop_index) {
		meta.metadata_t_nexthop = nexthop_index;
	}
	action fibv6_fib_miss_26() {
	}
	action fibv6_fib_miss_27() {
	}
	action set_nexthop_attributes(bit<16> bd, bit<48> dmac) {
		meta.nexthop_routed = true;
		meta.metadata_t_bd = bd;
		hdr.ethernet.dst_addr = dmac;
	}
	action rewrite_ipv4() {
		hdr.ipv4.ttl = ((hdr.ipv4.ttl + 0xff) & 0xff);
	}
	action rewrite_ipv6() {
		hdr.ipv6.hop_limit = ((hdr.ipv6.hop_limit + 0xff) & 0xff);
	}
	action rewrite_smac(bit<48> smac) {
		hdr.ethernet.src_addr = smac;
	}
	action rmac_hit() {
	}
	action act() {
		meta.fib_tmp = true;
	}
	action act_0() {
		meta.fib_tmp = false;
	}
	action act_1() {
		meta.metadata_t_nexthop = 0x0000;
	}
	action act_2() {
		meta.fibv6_tmp = true;
	}
	action act_3() {
		meta.fibv6_tmp = false;
	}
	action act_4() {
		meta.metadata_t_nexthop = 0x0000;
	}
	action act_5() {
		meta.metadata_t_bypass = 0x00;
	}
	action act_6() {
		meta.nexthop_routed = false;
	}
	action fib_fib__HIT__() {
	}
	action fib_fib__MISS__() {
	}
	action fibv6_fib__HIT__() {
	}
	action fibv6_fib__MISS__() {
	}
}

tables {
	table port_mapping {
		key = {
			standard_metadata.ingress_port: exact;
		}
		size = 1024;
		value_width = 32;
		default_action = NoAction_0;
	}
	table port_vlan_to_bd_mapping {
		key = {
			meta.metadata_t_ifindex: exact;
			hdr.vlan_tag.isValid(): ternary;
			hdr.vlan_tag.vid: ternary;
		}
		size = 1024;
		value_width = 48;
		default_action = NoAction_1;
	}
	table validate_ethernet {
		key = {
			hdr.ethernet.src_addr: ternary;
			hdr.ethernet.dst_addr: ternary;
			hdr.vlan_tag.isValid(): ternary;
		}
		size = 512;
		value_width = 16;
		default_action = NoAction_2;
	}
	table validate_ipv4 {
		key = {
			hdr.ipv4.version: ternary;
			hdr.ipv4.ihl: ternary;
			hdr.ipv4.ttl: ternary;
		}
		size = 512;
		value_width = 16;
		default_action = NoAction_3;
	}
	table validate_ipv6 {
		key = {
			hdr.ipv6.version: ternary;
			hdr.ipv6.hop_limit: ternary;
		}
		size = 512;
		value_width = 16;
		default_action = NoAction_4;
	}
	table rmac {
		key = {
			lkp_0.mac_dst_addr: exact;
		}
		size = 1024;
		value_width = 16;
		default_action = NoAction_8;
	}
	table tbl_act {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = act_5;
	}
	table tbl_act_0 {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = act_1;
	}
	table fib_fib {
		key = {
			meta.metadata_t_vrf: exact;
			lkp_0.ipv4_dst_addr: exact;
		}
		size = 1024;
		value_width = 32;
		default_action = fib_fib__MISS__;
	}
	table tbl_act_1 {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = act;
	}
	table tbl_act_2 {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = act_0;
	}
	table fib_fib_lpm {
		key = {
			meta.metadata_t_vrf: exact;
			lkp_0.ipv4_dst_addr: lpm;
		}
		size = 1024;
		value_width = 32;
		default_action = fib_fib_miss_23;
	}
	table tbl_act_3 {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = act_4;
	}
	table fibv6_fib {
		key = {
			meta.metadata_t_vrf: exact;
			lkp_0.ipv6_dst_addr: exact;
		}
		size = 1024;
		value_width = 32;
		default_action = fibv6_fib__MISS__;
	}
	table tbl_act_4 {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = act_2;
	}
	table tbl_act_5 {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = act_3;
	}
	table fibv6_fib_lpm {
		key = {
			meta.metadata_t_vrf: exact;
			lkp_0.ipv6_dst_addr: lpm;
		}
		size = 1024;
		value_width = 32;
		default_action = fibv6_fib_miss_27;
	}
	table tbl_act_6 {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = act_6;
	}
	table ecmp {
		key = {
			meta.metadata_t_nexthop: exact;
			lkp_0.ipv6_src_addr: exact;
			lkp_0.ipv6_dst_addr: exact;
			lkp_0.ipv6_flow_label: exact;
			lkp_0.ipv4_src_addr: exact;
			lkp_0.ipv4_dst_addr: exact;
		}
		size = 1024;
		value_width = 80;
		default_action = NoAction_5;
	}
	table ip_rewrite {
		key = {
			hdr.ipv4.isValid(): exact;
			hdr.ipv6.isValid(): exact;
		}
		size = 1024;
		value_width = 16;
		default_action = NoAction_6;
		entries = {
			(0x01, 0x00): rewrite_ipv4;
			(0x00, 0x01): rewrite_ipv6;
		}
	}
	table smac_rewrite {
		key = {
			meta.metadata_t_bd: exact;
		}
		size = 1024;
		value_width = 64;
		default_action = NoAction_7;
	}
	table dmac {
		key = {
			meta.metadata_t_bd: exact;
			hdr.ethernet.dst_addr: exact;
		}
		size = 1024;
		value_width = 32;
		default_action = dmac_miss;
	}
}

control MyIngress {
	stage port_mapping_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(port_mapping);
			}
		};
		executor {
			set_port_attributes: port_vlan_to_bd_mapping_s;
			NoAction_0: port_vlan_to_bd_mapping_s;
		};
	}
	stage port_vlan_to_bd_mapping_s {
		parser {
			vlan_tag;
		};
		matcher {
			switch (1) {
				0b1: table(port_vlan_to_bd_mapping);
			}
		};
		executor {
			set_bd_attributes: validate_ethernet_s;
			NoAction_1: validate_ethernet_s;
		};
	}
	stage validate_ethernet_s {
		parser {
			ethernet;
			vlan_tag;
		};
		matcher {
			switch (1) {
				0b1: table(validate_ethernet);
			}
		};
		executor {
			malformed_pkt_11: node_5;
			valid_pkt_tagged: node_5;
			valid_pkt_untagged: node_5;
			NoAction_2: node_5;
		};
	}
	stage rmac_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(rmac);
			}
		};
		executor {
			rmac_hit: tbl_act_s;
			NoAction_8: dmac_s;
		};
	}
	stage tbl_act_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(tbl_act);
			}
		};
		executor {
			act_5: node_11;
		};
	}
	stage fib_fib_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(fib_fib);
			}
		};
		executor {
			fib_fib__HIT__: tbl_act_1_s;
			fib_fib__MISS__: tbl_act_2_s;
		};
	}
	stage tbl_act_1_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(tbl_act_1);
			}
		};
		executor {
			act: node_16;
		};
	}
	stage tbl_act_2_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(tbl_act_2);
			}
		};
		executor {
			act_0: node_16;
		};
	}
	stage fibv6_fib_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(fibv6_fib);
			}
		};
		executor {
			fibv6_fib__HIT__: tbl_act_4_s;
			fibv6_fib__MISS__: tbl_act_5_s;
		};
	}
	stage tbl_act_4_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(tbl_act_4);
			}
		};
		executor {
			act_2: node_22;
		};
	}
	stage tbl_act_5_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(tbl_act_5);
			}
		};
		executor {
			act_3: node_22;
		};
	}
	stage tbl_act_6_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(tbl_act_6);
			}
		};
		executor {
			act_6: ecmp_s;
		};
	}
	stage ecmp_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(ecmp);
			}
		};
		executor {
			set_nexthop_attributes: node_26;
			NoAction_5: node_26;
		};
	}
	stage smac_rewrite_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(smac_rewrite);
			}
		};
		executor {
			rewrite_smac: dmac_s;
			NoAction_7: dmac_s;
		};
	}
	stage dmac_s {
		parser {
			ethernet;
		};
		matcher {
			switch (1) {
				0b1: table(dmac);
			}
		};
		executor {
			dmac_hit: None;
			dmac_miss: None;
		};
	}
	stage node_5 {
		parser {
			ipv4;
		};
		matcher {
			switch (hdr.ipv4.isValid()) {
				0b1: table(validate_ipv4);
				*: stage(node_7);
			}
		};
		executor {
			malformed_pkt_12: rmac_s;
			valid_ipv4_pkt: rmac_s;
			NoAction_3: rmac_s;
		};
	}
	stage node_7 {
		parser {
			ipv6;
		};
		matcher {
			switch (hdr.ipv6.isValid()) {
				0b1: table(validate_ipv6);
				*: stage(rmac_s);
			}
		};
		executor {
			malformed_pkt_13: rmac_s;
			valid_ipv6_pkt: rmac_s;
			NoAction_4: rmac_s;
		};
	}
	stage node_11 {
		parser {
		};
		matcher {
			switch ((lkp_0.ip_version == 0x04)) {
				0b1: table(tbl_act_0);
				*: table(tbl_act_3);
			}
		};
		executor {
			act_1: fib_fib_s;
			act_4: fibv6_fib_s;
		};
	}
	stage node_16 {
		parser {
		};
		matcher {
			switch (meta.fib_tmp) {
				0b0: table(fib_fib_lpm);
				*: stage(tbl_act_6_s);
			}
		};
		executor {
			fib_fib_hit_21: tbl_act_6_s;
			fib_fib_miss_23: tbl_act_6_s;
		};
	}
	stage node_22 {
		parser {
		};
		matcher {
			switch (meta.fibv6_tmp) {
				0b0: table(fibv6_fib_lpm);
				*: stage(tbl_act_6_s);
			}
		};
		executor {
			fibv6_fib_hit_25: tbl_act_6_s;
			fibv6_fib_miss_27: tbl_act_6_s;
		};
	}
	stage node_26 {
		parser {
			ethernet;
			ipv4;
			ipv6;
		};
		matcher {
			switch (meta.nexthop_routed) {
				0b1: table(ip_rewrite);
				*: stage(dmac_s);
			}
		};
		executor {
			rewrite_ipv4: smac_rewrite_s;
			rewrite_ipv6: smac_rewrite_s;
			NoAction_6: smac_rewrite_s;
		};
	}
}
control MyEgress {
}

