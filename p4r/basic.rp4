header ethernet_t {
	bit<48>	dstAddr;
	bit<48>	srcAddr;
	bit<16>	etherType;
}
header ipv4_t {
	bit<4>	version;
	bit<4>	ihl;
	bit<8>	diffserv;
	bit<16>	totalLen;
	bit<16>	identification;
	bit<3>	flags;
	bit<13>	fragOffset;
	bit<8>	ttl;
	bit<8>	protocol;
	bit<16>	hdrChecksum;
	bit<32>	srcAddr;
	bit<32>	dstAddr;
}

struct metadata {
} meta;

struct header {
	ethernet_t ethernet
	ipv4_t ipv4
} hdr;

parser MyParser(packet_in packet) {
	state start {
		packet.extract(hdr.ethernet);
		transition select(hdr.ethernet.etherType) {
			0x0800: parse_ipv4;
			default: accept;
		}
	}
	state parse_ipv4 {
		packet.extract(hdr.ipv4);
		transition accept;
	}
}

actions {
	action NoAction() {
	}
	action drop() {
		mark_to_drop(standard_metadata);
	}
	action ipv4_forward(bit<48> dstAddr, bit<9> port) {
		standard_metadata.egress_spec = port;
		hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;
		hdr.ethernet.dstAddr = dstAddr;
		hdr.ipv4.ttl = ((hdr.ipv4.ttl + 0xff) & 0xff);
	}
}

tables {
	table ipv4_lpm {
		key = {
			hdr.ipv4.dstAddr: lpm;
		}
		size = 1024;
		default_action = drop();
	}
}

control MyIngress {
	stage node_2 {
		parser {
			ipv4;
		};
		matcher {
			switch (hdr.ipv4.isValid()) {
				0b1: table(ipv4_lpm);
				*: None;
			}
		};
		executor {
			drop: None;
			ipv4_forward: None;
			NoAction: None;
		};
	}
}
control MyEgress {
}

