
header ethernet_t {
    bit<48> dst_addr;
    bit<48> src_addr;
    bit<16> ether_type;
}

header vlan_tag_t {
    bit<3> pcp;
    bit<1> cfi;
    bit<12> vid;
    bit<16> ether_type;
}

header ipv4_t {
    bit<4> version;
    bit<4> ihl;
    bit<8> diffserv;
    bit<16> total_len;
    bit<16> identification;
    bit<3> flags;
    bit<13> frag_offset;
    bit<8> ttl;
    bit<8> protocol;
    bit<16> hdr_checksum;
    bit<32> src_addr;
    bit<32> dst_addr;
}

header ipv6_t {
    bit<4> version;
    bit<8> traffic_class;
    bit<20> flow_label;
    bit<16> payload_len;
    bit<8> next_hdr;
    bit<8> hop_limit;
    bit<128> src_addr;
    bit<128> dst_addr;
}

header tcp_t {
    bit<16> src_port;
    bit<16> dst_port;
    bit<32> seq_no;
    bit<32> ack_no;
    bit<4> data_offset;
    bit<4> res;
    bit<8> flags;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgent_ptr;
}

header udp_t {
    bit<16> src_port;
    bit<16> dst_port;
    bit<16> hdr_length;
    bit<16> checksum;
}

struct metadata_t {
    bool routed;
    bit<16> bd;
    bit<16> vrf;
    bit<16> nexthop;
    bit<16> ifindex;
    bit<16> egress_ifindex;
    bit<8> bypass;
} ig_md;

struct lookup_fields_t {
    bit<48> mac_src_addr;
    bit<48> mac_dst_addr;
    bit<16> mac_type;

    bit<4> ip_version;
    bit<8> ip_proto;
    bit<8> ip_ttl;
    bit<8> ip_dscp;

    bit<20> ipv6_flow_label;
    bit<32> ipv4_src_addr;
    bit<32> ipv4_dst_addr;
    bit<128> ipv6_src_addr;
    bit<128> ipv6_dst_addr;
} lkp;


struct headers {
    ethernet_t      ethernet;
    vlan_tag_t      vlan_tag;
    ipv4_t          ipv4;
    ipv6_t          ipv6;
    tcp_t           tcp;
    udp_t           udp;
} hdr;

parser MyParser(packet_in packet) {
    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        pkt.extract(hdr.ethernet);
        transition select(hdr.ethernet.ether_type) {
            16w0x0800 : parse_ipv4;
            16w0x86dd : parse_ipv6;
            16w0x8100 : parse_vlan;
            default : accept;
        }
    }

    state parse_vlan {
        pkt.extract(hdr.vlan_tag);
        transition select(hdr.vlan_tag.ether_type) {
            16w0x0800 : parse_ipv4;
            16w0x86dd : parse_ipv6;
            default : accept;
        }
    }

    state parse_ipv4 {
        pkt.extract(hdr.ipv4);
        transition select(hdr.ipv4.protocol) {
            6 : parse_tcp;
            17 : parse_udp;
            default : accept;
        }
    }

    state parse_ipv6 {
        pkt.extract(hdr.ipv6);
        transition select(hdr.ipv6.next_hdr) {
            6 : parse_tcp;
            17 : parse_udp;
            default : accept;
        }
    }

    state parse_tcp {
        pkt.extract(hdr.tcp);
        transition accept;
    }

    state parse_udp {
        pkt.extract(hdr.udp);
        transition accept;
    }
}

actions {
    action malformed_pkt() {
        // drop.
    }

    action valid_pkt_untagged() {
        lkp.mac_src_addr = hdr.ethernet.src_addr;
        lkp.mac_dst_addr = hdr.ethernet.dst_addr;
        lkp.mac_type = hdr.ethernet.ether_type;
    }

    action valid_pkt_tagged() {
        lkp.mac_src_addr = hdr.ethernet.src_addr;
        lkp.mac_dst_addr = hdr.ethernet.dst_addr;
        lkp.mac_type = hdr.vlan_tag.ether_type;
    }

    action valid_ipv4_pkt() {
        // Set common lookup fields
        lkp.ip_version = 4w4;
        lkp.ip_dscp = hdr.ipv4.diffserv;
        lkp.ip_proto = hdr.ipv4.protocol;
        lkp.ip_ttl = hdr.ipv4.ttl;
        lkp.ipv4_src_addr = hdr.ipv4.src_addr;
        lkp.ipv4_dst_addr = hdr.ipv4.dst_addr;
    }

    action valid_ipv6_pkt() {
        // Set common lookup fields
        lkp.ip_version = 4w6;
        lkp.ip_dscp = hdr.ipv6.traffic_class;
        lkp.ip_proto = hdr.ipv6.next_hdr;
        lkp.ip_ttl = hdr.ipv6.hop_limit;
        lkp.ipv6_src_addr = hdr.ipv6.src_addr;
        lkp.ipv6_dst_addr = hdr.ipv6.dst_addr;
    }

    action set_port_attributes(bit<16> ifindex) {
        ig_md.ifindex = ifindex;
    }

    action set_bd_attributes(bit<16> bd, bit<16> vrf) {
        ig_md.bd = bd;
        ig_md.vrf = vrf;
    }

    action rmac_hit() { }

    action ipv4_fib_hit(bit<16> nexthop_index) {
        ig_md.nexthop = nexthop_index;
    }

    action ipv4_fib_miss() { }

    action set_nexthop_attributes(bit<16> bd, bit<48> dmac) {
        ig_md.routed = true;
        ig_md.bd = bd;
        hdr.ethernet.dst_addr = dmac;
    }

    action rewrite_ipv4() {
        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
    }

    action rewrite_ipv6() {
        hdr.ipv6.hop_limit = hdr.ipv6.hop_limit - 1;
    }

    action rewrite_smac(bit<48> smac) {
        hdr.ethernet.src_addr = smac;
    }

    action dmac_miss() {
        ig_md.egress_ifindex = 16w0xffff;
    }

    action dmac_hit(bit<16> ifindex) {
        ig_md.egress_ifindex = ifindex;
    }

    action NoAction() {

    }
}

tables {
    table validate_ethernet {
        key = {
            hdr.ethernet.src_addr : ternary;
            hdr.ethernet.dst_addr : ternary;
            hdr.vlan_tag.isValid() : ternary;
        }
        size = 512;
    }

    table validate_ipv4 {
        key = {
            hdr.ipv4.version : ternary;
            hdr.ipv4.ihl : ternary;
            hdr.ipv4.ttl : ternary;
        }
        size = 512;
    }

    table validate_ipv6 {
        key = {
            hdr.ipv6.version : ternary;
            hdr.ipv6.hop_limit : ternary;
        }
        size = 512;
    }

    table port_mapping {
        key = { standard_metadata.ingress_port : exact; }
        size = 1024;
    }

    table port_vlan_to_bd_mapping {
        key = {
            ig_md.ifindex : exact;
            hdr.vlan_tag.isValid() : ternary;
            hdr.vlan_tag.vid : ternary;
        }
        size = 1024;
    }

    table rmac {
        key = {
            lkp.mac_dst_addr : exact;
        }
        size = 1024;
    }

    // care about this name
    table ipv4_fib {
        key = {
            ig_md.vrf : exact;
            hdr.ipv4.dst_addr : exact;
        }
        const default_action = ipv4_fib_miss;
        size = 1024;
    }

    table ipv4_fib_lpm {
        key = {
            ig_md.vrf : exact;
            hdr.ipv4.dst_addr : lpm;
        }

        const default_action = ipv4_fib_miss;
        size = 1024;
    }

    // care about this name
    table ipv6_fib {
        key = {
            ig_md.vrf : exact;
            hdr.ipv6.dst_addr : exact;
        }
        const default_action = ipv6_fib_miss;
        size = 1024;
    }

    table ipv6_fib_lpm {
        key = {
            ig_md.vrf : exact;
            hdr.ipv6.dst_addr : lpm;
        }

        const default_action = ipv6_fib_miss;
        size = 1024;
    }

    
    table ecmp {
        key = {
            ig_md.nexthop : exact;
            lkp.ipv6_src_addr : exact;
            lkp.ipv6_dst_addr : exact;
            lkp.ipv6_flow_label : exact;
            lkp.ipv4_src_addr : exact;
            lkp.ipv4_dst_addr : exact;
        }

        const default_action = NoAction;
        size = 1024;
    }

    table ip_rewrite {
        key = {
            hdr.ipv4.isValid() : exact;
            hdr.ipv6.isValid() : exact;
        }

        const entries = {
            (true, false) : rewrite_ipv4();
            (false, true) : rewrite_ipv6();
        }
    }

    table smac_rewrite {
        key = { ig_md.bd : exact; }
        const default_action = NoAction;
    }

    table dmac {
        key = {
            ig_md.bd : exact;
            hdr.ethernet.dst_addr : exact;
        }
        const default_action = dmac_miss;
        size = 1024;
    }
}

control MyIngress {

    stage port_mapping_s {
        parser {};
        matcher {
            switch(1) {
                1: table(port_mapping);
            }
        };
        executor {
            set_port_attributes: port_vlan_to_bd_mapping_s;
        }
    }

    stage port_vlan_to_bd_mapping_s {
        parser {hdr.vlan_tag};
        matcher {
            switch(1) {
                1: table(port_vlan_to_bd_mapping);
            }
        };
        executor {
            set_bd_attributes: validate_ethernet_s;
            NoAction: validate_ethernet_s;
        }
    }

    stage validate_ethernet_s {
        parser {hdr.ethernet; hdr.vlan_tag};
        matcher {
            switch(1) {
                1: table(validate_ethernet);
            }
        };
        executor {
            malformed_pkt: validate_ip_s;
            valid_pkt_untagged: validate_ip_s;
            valid_pkt_tagged: validate_ip_s;
        }
    }

    stage validate_ip_s {
        parser {hdr.ipv4; hdr.ipv6};
        matcher {
            switch(hdr.ipv4.isValid(), hdr.ipv6.isValid()) {
                10: table(validate_ipv4);
                01: table(validate_ipv6);
                * : None;
            }
        };
        executor {
            valid_ipv4_pkt: rmac_s;
            valid_ipv6_pkt: rmac_s;
            malformed_pkt: rmac_s;
            NoAction: rmac_s;
        }
    }

    stage rmac_s{
        parser {};
        matcher {
            switch(1) {
                1: table(rmac);
            }
        }
        executor {
            NoAction: dmac_s;
            rmac_hit: fib_s;
        }
    }

    stage ip_s {
        parser {};
        matcher {
            switch(lkp.ip_version == 4w4) {
                1: stage(ipv4_s);
                0: stage(ipv6_s);
            }
        };
        executor {

        }
    }

    stage ipv4_fib_s {
        parser {hdr.ipv4};
        matcher {
            switch(1) {
                1: table(ipv4_fib);
            }
        }
        executor {
            ipv4_fib_hit: ecmp_s;
            ipv4_fib_miss: ipv4_fib_lpm_s;
        }
    }

    stage ipv4_fib_lpm_s {
        parser {hdr.ipv4};
        matcher {
            switch(1) {
                1: table(ipv4_fib_lpm);
            }
        }
        executor {
            ipv4_fib_hit: ecmp_s;
            ipv4_fib_miss: ecmp_s;
        }
    }

    stage ipv6_fib_s {
        parser {hdr.ipv6};
        matcher {
            switch(1) {
                1: table(ipv6_fib);
            }
        }
        executor {
            ipv6_fib_hit: ecmp_s;
            ipv6_fib_miss: ipv6_fib_lpm_s;
        }
    }

    stage ipv6_fib_lpm_s {
        parser {hdr.ipv6};
        matcher {
            switch(1) {
                1: table(ipv6_fib_lpm);
            }
        }
        executor {
            ipv6_fib_hit: ecmp_s;
            ipv6_fib_miss: ecmp_s;
        }
    }

    stage ecmp_s {
        parser {}
        matcher {
            switch(1) {
                1: table(ecmp);
            }
        };
        executor {
            set_nexthop_attributes: rewrite_s;
            NoAction: rewrite_s;
        }
    }

    stage rewrite_s {
        parser {hdr.ipv4; hdr.ipv6;};
        matcher {
            switch(ig_md.routed) {
                0: stage(dmac_s);
                1: table(ip_rewrite);
            }
        };
        executor {
            rewrite_ipv4: smac_rewrite_s;
            rewrite_ipv6: smac_rewrite_s;
        }
    }

    stage smac_rewrite_s {
        parser {};
        matcher {
            switch(1) {
                1: table(smac_rewrite);
            }
        };
        executor {
            rewrite_smac: dmac_s;
            NoAction: dmac_s;
        }
    }

    stage dmac_s{
        parser {hdr.ethernet;};
        matcher {
            switch(1) {
                1: table(dmac);
            }
        };
        executor {
            dmac_miss: None;
            dmac_hit: None;
        }
    }
}

control MyEgress {
    
}