

header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header myTunnel_t {
    bit<16> proto_id;
    bit<16> dst_id;
}

header ipv4_t {
    bit<4>    version;
    bit<4>    ihl;
    bit<8>    diffserv;
    bit<16>   totalLen;
    bit<16>   identification;
    bit<3>    flags;
    bit<13>   fragOffset;
    bit<8>    ttl;
    bit<8>    protocol;
    bit<16>   hdrChecksum;
    bit<32>  srcAddr;
    bit<32>  dstAddr;
}

struct header {
    ethernet_t ethernet;
    myTunnel_t myTunnel;
    ipv4_t ipv4;
} hdr;

parser MyParser(packet_in packet) {
    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            TYPE_MYTUNNEL: parse_myTunnel;
            TYPE_IPV4: parse_ipv4;
            default: accept;
        }
    }

    state parse_myTunnel {
        packet.extract(hdr.myTunnel);
        transition select(hdr.myTunnel.proto_id) {
            TYPE_IPV4: parse_ipv4;
            default: accept;
        }
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition accept;
    }
}

actions {
    action ipv4_forward(bit<48> dstAddr, bit<9> port) {
        standard_metadata.egress_spec = port;
        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;
        hdr.ethernet.dstAddr = dstAddr;
        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
    }

    action myTunnel_forward(bit<9> port) {
        standard_metadata.egress_spec = port;
    }

    action drop() {
        // implemented with drop = 1, but as we don't have TM, it should be omitted.
        mark_to_drop(standard_metadata); 
    }
}

tables {
    table ipv4_lpm {
        key = {
            hdr.ipv4.dstAddr: lpm;
        }
        size = 1024;
        default_action = drop();
    }

    table myTunnel_exact {
        key = {
            hdr.myTunnel.dst_id: exact;
        }
        size = 1024;
        default_action = drop();
    }
}


control MyIngress {

    stage ipv4_lpm_s {
        parser {ipv4_t};

        matcher {
            switch(hdr.ipv4.isValid(), hdr.myTunnel.isValid()) {
                0b10: table(ipv4_lpm);
                *: stage(myTunnel_exact_s);
            }
        };
        
        executor {
            ipv4_forward: myTunnel_exact_s;
            drop: myTunnel_exact_s;
            default: myTunnel_exact_s;
        };
    }

    stage myTunnel_exact_s {
        parser {myTunnel_t};

        matcher {
            switch(hdr.myTunnel.isValid()) {
                0b1: table(myTunnel_exact);
                *: None;
            }
        };

        executor = {
            myTunnel_forward: None;
            drop: None;
            default: None;
        }
    }
}

control myEgress {

}